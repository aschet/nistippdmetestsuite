checkerCmdErrors.txt

There is no checkerCmdErrors.res file.

This file contains what the NIST I++ command checker prints when the
checkerCmdErrors.prg file is run through it. The printed error messages are
native to the NIST command checker and are intended to describe the error
very specifically. The number below each error message is the error number
from the I++ DME Interface specification that is assigned by the NIST
command checker to the error.

The checkerCmdErrors.prg file was designed to trigger all the different
errors the command checker detects. The checkerCmd_errors.prg file contains
four sections:
NOT HOMED ERRORS
UNDEFTOOL ERRORS
NOTOOL ERRORS
ALL OTHER ERRORS

Within each section, the errors occur in the order in which they appear in
the checkerCmd.cc file. For commands that cause errors, the second and
third digits of each tag below indicate the function that generated the
error. The third and fourth digits of each tag indicate the error message
within the function. For example, the tag 01308 means the following error
message is generated by the 13th function that generates error messages,
and it is the 8th error message generated by that function. Commands are
included that divide sections or do not cause errors directly but set the
context for errors that follow; these are all numbered 00001 or E0001.

The READINESS_ERRED_CAN_NOT_EXECUTE_COMMAND error, which should have tag
number 05402 does not appear because it cannot be triggered in the
stand-alone checker.

Each command that causes an error is followed by a ClearAllErrors command
so that when this program is run using the client and server, the intended
error messages will be returned. Without the ClearAllErrors commands, the
server always returns error 0514, "Use ClearAllErrors to continue".

Responses to ClearAllErrors commands have been omitted.

The checkerCmdErrors.prg file passes through the command parser without
error, except for one instance of THETA_OUT_OF_RANGE.

00001 StartSession()
\\
00001 ChangeTool("START NOT HOMED ERRORS")
ChangeTool: UNKNOWN TOOL
1502

00201 AlignPart(0, 0, 1, 0, 0, 1, 30)
AlignPart: NOT HOMED CAN NOT EXECUTE COMMAND
0507

00303 AlignTool(0, 0, 1, 30)
AlignTool: NOT HOMED CAN NOT EXECUTE COMMAND
0507

00401 CenterPart(0, 0, 0, 1)
CenterPart: NOT HOMED CAN NOT EXECUTE COMMAND
0507

02501 GoTo(X(0))
GoTo: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03301 PtMeas(X(0))
PtMeas: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03401 ReQualify()
ReQualify: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03501 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03601 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03701 ScanInPlaneEndIsCyl(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03801 ScanInPlaneEndIsPlane(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: NOT HOMED CAN NOT EXECUTE COMMAND
0507

03901 ScanInPlaneEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: NOT HOMED CAN NOT EXECUTE COMMAND
0507

04001 ScanOnCircle(1,2,3,4,5,6,7,8,9,10,1,2)
ScanOnCircle: NOT HOMED CAN NOT EXECUTE COMMAND
0507

04201 ScanOnLine(1,2,3,4,5,6,7,8,9,10)
ScanOnLine: NOT HOMED CAN NOT EXECUTE COMMAND
0507

00001 ChangeTool("START UNDEFTOOL ERRORS")
ChangeTool: UNKNOWN TOOL
1502

00001 Home()
\\

01001 EnumAllProp(Tool.PtMeasPar())
EnumAllProp: CAN NOT ENUMALLPROP UNDEFTOOL PTMEASPAR
1503

01002 EnumAllProp(Tool.GoToPar())
EnumAllProp: CAN NOT ENUMALLPROP UNDEFTOOL GOTOPAR
1503

01101 EnumProp(Tool.PtMeasPar())
EnumProp: CAN NOT ENUMPROP UNDEFTOOL PTMEASPAR
1503

01102 EnumProp(Tool.GoToPar())
EnumProp: CAN NOT ENUMPROP UNDEFTOOL GOTOPAR
1503

02201 GetProp(Tool.PtMeasPar.Accel())
GetProp: CAN NOT GETPROP UNDEFTOOL
1503

E2301 GetPropE(Tool.PtMeasPar.Accel())
GetPropE: CAN NOT GETPROPE UNDEFTOOL
1503

02502 GoTo(X(0))
GoTo: CAN NOT GOTO USING UNDEFTOOL
1503

03304 PtMeas(X(0))
PtMeas: CAN NOT PTMEAS USING UNDEFTOOL
1503

03402 ReQualify()
ReQualify: CAN_NOT_REQUALIFY_UNDEFTOOL
1503

03502 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: CAN NOT SCAN USING UNDEFTOOL
1503

03602 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: CAN NOT SCAN USING UNDEFTOOL
1503

03702 ScanInPlaneEndIsCyl(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: CAN NOT SCAN USING UNDEFTOOL
1503

03802 ScanInPlaneEndIsPlane(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: CAN NOT SCAN USING UNDEFTOOL
1503

03902 ScanInPlaneEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: CAN NOT SCAN USING UNDEFTOOL
1503

04002 ScanOnCircle(1,2,3,4,5,6,7,8,9,10,1,2)
ScanOnCircle: CAN NOT SCAN USING UNDEFTOOL
1503

04202 ScanOnLine(1,2,3,4,5,6,7,8,9,10)
ScanOnLine: CAN NOT SCAN USING UNDEFTOOL
1503

04701 SetProp(Tool.PtMeasPar.Accel(54))
SetProp: CAN NOT SETPROP UNDEFTOOL
1503

00001 ChangeTool("START NOTOOL ERRORS")
ChangeTool: UNKNOWN TOOL
1502

00001 ChangeTool("NoTool")
\\

01003 EnumAllProp(Tool.PtMeasPar())
EnumAllProp: CAN NOT ENUMALLPROP NOTOOL PTMEASPAR
0507

01103 EnumProp(Tool.PtMeasPar())
EnumProp: CAN NOT ENUMPROP NOTOOL PTMEASPAR
0507

02202 GetProp(Tool.PtMeasPar.Accel())
GetProp: CAN NOT GETPROP PTMEASPARS OF NOTOOL
0507

E2302 GetPropE(Tool.PtMeasPar.Accel())
GetPropE: CAN NOT GETPROPE PTMEASPARS OF NOTOOL
0507

03305 PtMeas(X(0))
PtMeas: CAN NOT PTMEAS USING NOTOOL
0507

03403 ReQualify()
ReQualify: CAN_NOT_REQUALIFY_NOTOOL
0507

03503 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: CAN NOT SCAN USING NOTOOL
0507

03603 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: CAN NOT SCAN USING NOTOOL
0507

03703 ScanInPlaneEndIsCyl(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: CAN NOT SCAN USING NOTOOL
0507

03803 ScanInPlaneEndIsPlane(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: CAN NOT SCAN USING NOTOOL
0507

03903 ScanInPlaneEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: CAN NOT SCAN USING NOTOOL
0507

04003 ScanOnCircle(1,2,3,4,5,6,7,8,9,10,1,2)
ScanOnCircle: CAN NOT SCAN USING NOTOOL
0507

04203 ScanOnLine(1,2,3,4,5,6,7,8,9,10)
ScanOnLine: CAN NOT SCAN USING NOTOOL
0507

04702 SetProp(Tool.PtMeasPar.Accel(54))
SetProp: CAN NOT SETPROP PTMEASPARS OF NOTOOL
0507

00001 ChangeTool("START ALL OTHER ERRORS")
ChangeTool: UNKNOWN TOOL
1502

00001 ChangeTool("BaseTool")
\\

00301 AlignTool(0, 0, 2, 30)
AlignTool: FIRST VECTOR NOT NORMALIZED
0502

00302 AlignTool(0, 0, 1, 0, 0, 2, 30, 30)
AlignTool: SECOND VECTOR NOT NORMALIZED
0502

00501 ChangeTool("UnDefTool")
ChangeTool: CAN NOT CHANGE TOOL TO UNDEFTOOL
1503

00502 ChangeTool("Bleep")
ChangeTool: UNKNOWN TOOL
1502

01501 GetChangeToolAction("UnDefTool")
GetChangeToolAction: CAN NOT CHANGE TOOL TO UNDEFTOOL
1503

01502 GetChangeToolAction("Bleep")
GetChangeToolAction: UNKNOWN TOOL
1502

01901 GetErrorInfo(0013)
GetErrorInfo: BAD ERROR NUMBER
0504

02502 GoTo(X(123456789))
GoTo: TARGET POINT OUT OF WORK VOLUME
1008

E3001 OnMoveReportE(Time(0.09))
OnMoveReportE: TIME ARGUMENT MUST NOT BE LESS THAN A TENTH
0510

E3002 OnMoveReportE(Dis(-3), X())
OnMoveReportE: DIS ARGUMENT MUST BE POSITIVE
0510

E0001 OnMoveReportE(Dis(3.00000), X())
\\

E3003 OnMoveReportE(Dis(3), X())
OnMoveReportE: MUST STOP EXISTING DAEMON BEFORE STARTING ANOTHER
0515

03002 PtMeas(X(0), IJK(0,0,0))
PtMeas: DIRECTION VECTOR HAS ZERO LENGTH
1010

03303 PtMeas(X(123456789))
PtMeas: TARGET POINT OUT OF WORK VOLUME
1008

03504 ScanInCylEndIsPlane(1,2,3,0,0,0,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: AXIS DIRECTION VECTOR HAS ZERO LENGTH
1010

03505 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,0,0,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: DIRECTION VECTOR HAS ZERO LENGTH
1010

03506 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,0,0,3,4,5,6)
ScanInCylEndIsPlane: DIRECTION VECTOR HAS ZERO LENGTH
1010

03507 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,0,0,0)
ScanInCylEndIsPlane: DIRECTION VECTOR HAS ZERO LENGTH
1010

03508 ScanInCylEndIsPlane(1,2,3,4,5,6,123456789,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: SCAN POINT MUST BE IN WORK VOLUME
0504

03509 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,123456789,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: SCAN POINT MUST BE IN WORK VOLUME
0504

03510 ScanInCylEndIsPlane(1,2,3,4,5,6,7,8,9,0,1,2,7,8,9,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: START POINT MUST DIFFER FROM DIRECTION POINT
0502

03511 ScanInCylEndIsPlane(1,2,3,4,5,6,1,2,3,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6)
ScanInCylEndIsPlane: START POINT MUST NOT BE ON CYLINDER AXIS
0502

03604 ScanInCylEndIsSphere(1,2,3,0,0,0,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: AXIS DIRECTION VECTOR HAS ZERO LENGTH
1010

03605 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,0,0,0,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: DIRECTION VECTOR HAS ZERO LENGTH
1010

03606 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,0,0,0)
ScanInCylEndIsSphere: DIRECTION VECTOR HAS ZERO LENGTH
1010

03607 ScanInCylEndIsSphere(1,2,3,4,5,6,123456789,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: SCAN POINT MUST BE IN WORK VOLUME
0504

03608 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,123456789,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: SCAN POINT MUST BE IN WORK VOLUME
0504

03609 ScanInCylEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,7,8,9,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: START POINT MUST DIFFER FROM DIRECTION POINT
0502

03610 ScanInCylEndIsSphere(1,2,3,4,5,6,1,2,3,10,1,2,3,4,5,6,7,8,9,10,1,2,3)
ScanInCylEndIsSphere: START POINT MUST NOT BE ON CYLINDER AXIS
0502

03704 ScanInPlaneEndIsCyl(1,2,3,4,5,6,7,8,9,10,1,2,3,0,0,0,7,8,9,10,1)
ScanInPlaneEndIsCyl: AXIS DIRECTION VECTOR HAS ZERO LENGTH
1010

03705 ScanInPlaneEndIsCyl(1,2,3,0,0,0,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: DIRECTION VECTOR HAS ZERO LENGTH
1010

03706 ScanInPlaneEndIsCyl(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,0,0,0)
ScanInPlaneEndIsCyl: DIRECTION VECTOR HAS ZERO LENGTH
1010

03707 ScanInPlaneEndIsCyl(123456789,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: SCAN POINT MUST BE IN WORK VOLUME
0504

03708 ScanInPlaneEndIsCyl(1,2,3,4,5,6,123456789,8,9,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: SCAN POINT MUST BE IN WORK VOLUME
0504

03709 ScanInPlaneEndIsCyl(1,2,3,4,5,6,1,2,3,10,1,2,3,4,5,6,7,8,9,10,1)
ScanInPlaneEndIsCyl: START POINT MUST DIFFER FROM DIRECTION POINT
0502

03804 ScanInPlaneEndIsPlane(1,2,3,0,0,0,7,8,9,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: DIRECTION VECTOR HAS ZERO LENGTH
1010

03805 ScanInPlaneEndIsPlane(1,2,3,4,5,6,7,8,9,10,1,2,3,0,0,0,7,8,9,10)
ScanInPlaneEndIsPlane: DIRECTION VECTOR HAS ZERO LENGTH
1010

03806 ScanInPlaneEndIsPlane(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,0,0,0)
ScanInPlaneEndIsPlane: DIRECTION VECTOR HAS ZERO LENGTH
1010

03807 ScanInPlaneEndIsPlane(123456789,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: SCAN POINT MUST BE IN WORK VOLUME
0504

03808 ScanInPlaneEndIsPlane(1,2,3,4,5,6,123456789,8,9,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: SCAN POINT MUST BE IN WORK VOLUME
0504

03809 ScanInPlaneEndIsPlane(1,2,3,4,5,6,1,2,3,10,1,2,3,4,5,6,7,8,9,10)
ScanInPlaneEndIsPlane: START POINT MUST DIFFER FROM DIRECTION POINT
0502

03904 ScanInPlaneEndIsSphere(1,2,3,0,0,0,7,8,9,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: DIRECTION VECTOR HAS ZERO LENGTH
1010

03905 ScanInPlaneEndIsSphere(1,2,3,4,5,6,7,8,9,10,1,2,3,4,0,0,0)
ScanInPlaneEndIsSphere: DIRECTION VECTOR HAS ZERO LENGTH
1010

03906 ScanInPlaneEndIsSphere(123456789,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: SCAN POINT MUST BE IN WORK VOLUME
0504

03907 ScanInPlaneEndIsSphere(1,2,3,4,5,6,123456789,8,9,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: SCAN POINT MUST BE IN WORK VOLUME
0504

03908 ScanInPlaneEndIsSphere(1,2,3,4,5,6,7,8,9,10,123456789,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: SCAN POINT MUST BE IN WORK VOLUME
0504

03909 ScanInPlaneEndIsSphere(1,2,3,4,5,6,1,2,3,10,1,2,3,4,5,6,7)
ScanInPlaneEndIsSphere: START POINT MUST DIFFER FROM DIRECTION POINT
0502

04004 ScanOnCircle(1,2,3,4,5,6,0,0,0,10,1,2)
ScanOnCircle: DIRECTION VECTOR HAS ZERO LENGTH
1010

04005 ScanOnCircle(1,2,3,1,2,3,7,8,9,10,1,2)
ScanOnCircle: RADIUS MUST HAVE POSITIVE LENGTH
0502

04006 ScanOnCircle(1,2,3,4,5,6,7,8,9,10,1,2)
ScanOnCircle: RADIUS MUST BE PERPENDICULAR TO NORMAL
0502

04007 ScanOnCircle(1,2,3,123456789,5,6,0,1,-1,10,1,2)
ScanOnCircle: SCAN POINT MUST BE IN WORK VOLUME
0504

04204 ScanOnLine(1,2,3,1,2,3,7,8,9,10)
ScanOnLine: START POINT MUST DIFFER FROM END POINT
0502

04205 ScanOnLine(123456789,2,3,4,5,6,7,8,9,10)
ScanOnLine: SCAN POINT MUST BE IN WORK VOLUME
0504

04206 ScanOnLine(1,2,3,123456789,5,6,7,8,9,10)
ScanOnLine: SCAN POINT MUST BE IN WORK VOLUME
0504

04601 SetCsyTransformation(PartCsy, 0, 0, 0, 180.1, 0, 0)
SetCsyTransformation: THETA OUT OF RANGE
1007

04801 SetTool("UnDefTool")
SetTool: CAN NOT SET TOOL TO UNDEFTOOL
1503

04802 SetTool("Bleep")
SetTool: UNKNOWN TOOL
1502

04901 StartSession()
StartSession: ALREADY IN SESSION
0507

05101 StopDaemon(E1111)
StopDaemon: DAEMON TO STOP DOES NOT EXIST
0513

05201 TiltCenterPart(1, 0, 0, 1, 0, 0, 1)
TiltCenterPart: AXIS DIRECTION VECTOR HAS ZERO LENGTH
1010

05301 TiltPart(0, 0, 0, 1)
TiltPart: AXIS DIRECTION VECTOR HAS ZERO LENGTH
1010

00001 EndSession()
\\

05401 Get(X())
Get: NOT IN SESSION CAN NOT EXECUTE COMMAND
0507


00001 StartSession()
\\

E0001 AbortE()
\\

05403 Get(X())
Get: READINESS ABORTED CAN NOT EXECUTE COMMAND
0514

09999 EndSession()
\\

:
:
